#include <stdint.h>
#include <stdbool.h>

@test "better ascii strings for c" {
    char const* p = "1234";

    // this for loop uses the null terminator
    // when the iterable item is a `char const*`
    for @idx(uint8_t i, char c : p)
        @dbg(c, i);

    // it also has the null terminator (unfortunately)
    mystring_t s = "hello"; // implicitly calls `mystring_t.from_str`
    @expect(s.len() == 5);

    for (char c : s)
        @dbg(c);

    // "he", but you are gonna have problems with null terminator
    const s2 = mystring_t.new(2, s.buffer);
    @expect(s != s2);
}

// THIS IS JUST TO SHOW HOW OPERATORS WORK UNDER THE HOOD
// it is already declared in `pkg("string").string_t`
typedef struct {
    char*  buffer;
    size_t length;

    @this_t new(size_t length, char* buffer) static {
        return (@this_t) {
            .buffer = buffer,
            .length = length
        };
    }

    @this_t from_str<size_t length, char const* text>() static {
        // in this case i can just reuse the main constructor
        // but the `from_str` function is useful because
        // it's based on a template and you can inspect
        // the template arguments with metaprogramming
        return @this_t.new(length, (char*)text);
    }

    char* nth(size_t index) {
        return &.buffer[index];
    }

    size_t len() const {
        return .length;
    }

    bool eq(@this_t other) const {
        if (.buffer == other.buffer)
            return .length == other.length;

        if (.length != other.length)
            return false;

        for @zip(auto l : @this, auto r : other)
            if (l != r)
                return false;

        return true;
    }
} mystring_t;
