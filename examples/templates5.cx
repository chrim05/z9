@import cxc;
@import io;

// self source code
// see `embed.cx`
const source_code = @embed("templates5.cx");

// very powerful at runtime
void main() {
    // ast is of type `cxc.cst_t`
    // which is the concrete syntax tree of the source code;
    //
    // the abstract one just represents the syntax structure
    // of the code, the concrete one has all identifiers
    // resolved and all types as well
    const cst = cxc.compile_to_cst(source_code);

    // `get_member` returns a `cxc.info_t`
    const fn = cst.get_member("main");
    const fn_signature = fn.type;
    const fn_rettype = fn_signature.return_type();

    // output (runtime):
    // ```
    // the function "main" returns type `void`
    // ```
    io.println(
        @"the function {fn.name.repr()} returns type: `{fn_rettype}`"
    );
    
    @expect(fn_rettype == @info(main).type.return_type());

    // we obviously can't declare a variable
    // using a runtime value;
    // 
    // error: input of `@decl_t` must be a
    //        meta value
    @decl_t(this_function.return_type) x;
}

int foo() { return 0; }

@test "and powerful at comtime as well" {
    const cst = @meta(cxc.compile_to_cst(source_code));
    const fn_rettype = cst.get_member("foo").type.return_type();

    // but this time it works, because
    // `cst` is a meta value (like constexpr in c++)
    // and `fn_rettype` is too
    @decl_t(fn_rettype) x = 10;
}