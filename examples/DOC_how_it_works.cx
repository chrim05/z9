// tags are simple to implement, so i won't go in detail with that

// avoiding the need of forward declarations is less simpler.
//
// the problem with c is that you really need a symbol table
// during parsing, otherwise you won't be able to correctly
// parse ambiguous syntaxes.
//
// for example:
void main() {
    a* b; // is this decl or binexpr?
          // tldr: depends whether `a` is type or not
}

// (in a normal c compiler) you must know what `a` is
// in order to correctly parse the statement
// as a binary expression (mul) or a variable declaration.
// this means that the parser must know the declaration of a,
// if `a` was previously typedef-fed then that's clearly a declaration
// otherwise a binary expression would be the most suitable syntax node.
//
// but this would require a symbol table at parsing time, and we don't want it
// otherwise forward declarations will be necessary again.
//
// something we could do is to parse the statement as a decl when `b`
// is not already LOCALLY declared;
// however, this approach would only works in this case, there are tons of
// syntax ambiguities in c, where knowing whether an identifier is a typedef or not
// really helps, and sometimes it seems to be almost necessary.
//
// the best solution i currently found is the following one:
// we only parse declarations and not definitions of the members,
// this is something called lazy parsing and it's probably the most suitable
// solution in this case since the majority of syntax ambiguities happens
// in function's bodies.
//
// the idea is to lazy parse the file, this means we only parse the declarations
// of members, for example:
void main() {
    a* b;
}

typedef long long a;

// the ast will look like this (pseudo code for representing the ast node):
// (note that no symbol table is used here to parse this correctly)
(file_node_t) {
    .filename = "DOC_how_it_works.cx",
    .decls = {
        (fn_decl_node_t) {
            .return_type = primitive_type(void),
            .name = "main",
            .params = { },
            .body_tokens = {
                id("a"), star(), id("b") // the function body is not parsed
            }
        },

        (typedef_node_t) {
            .body = primitive_type(long long),
            .name = "a"
        }
    }
}

// then this ast will be passed to the semantic analyzer (which also emits the IR)
// it firstly allocates a symbol table in which pre declares all members of the file_node_t
// then evaluates each member separately and when it encounters a fn_decl_node_t,
// instantiates a body-parser which uses the symbol table (in which below declared members are
// available as well) to correctly parse the ambiguous statement

// problems with this solution (feel free to fill the list as you want):
// ..

// how do imports work?

@import io;
// remember, this is short hand for
@import std("io") io; // the compiler will raise compilation error
                      // if the module name and the alias for that module
                      // are the same id, to encourage you to have a single
                      // way to do it; this syntax is more suitable for cases like this:
                                       @import std("io") inout;

// remember that you can't use macros defined in a module,
// because the preprocessor operates on files, not on module.
// modules are managed after parsing;
// they containerize a c file so that