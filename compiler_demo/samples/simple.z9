/*
#include <stdint.h>

const uint* const main(int, short);

typedef unsigned int uint;

int;

int x = 10, y = 20, *const z;

@use_feature strict_rules {
  int y;
}

int add() {}

typedef struct Some {
    int x = 0, y, *const z;
  
    void increase() {
        ++.x;
    }
  
    void do_something() const {
        printf("Some(x: %d)\n", .x);
    }
  
    @this_t new() static {
        return (@this_t) { .x = 1 };
    }
} some_t;

@use_feature strict_rules, some_other_feature;
int x;

int (*m)(int, int) = 0;

enum some_t k;
enum { X, Y = 10 + 2 * const_call(), Z, };

int x[10];
k x[10];
k const x[2 * 2 + const_call()];
const k* x[2 * 2];

// abstract declarator
void foo(int(*bar)(void const*));

int ((*x)(void));
int (*y)(int a);
int z(int a);
int *w;
int k;

char* nth(size_t index) {
    return &.buffer[index];
}

@test "description of the first z9 unittest" {
    do_something();
    expect(10 == 2);
}

@test "another test" {

}

@import pkg_io = io;

@import io;

@import u = url("https://test.com/header.h");

@import l = "local.h";

@import s = std("stdio.h");

@import { some } = "local.h";

@import {
    something, alias = other
} = "local.h";
*/

// char const* const (*a)[10][20];
// char* const (*const a)[10];

// void* const* main(const void* a, char* const* b, short** c, int d) {
//     
// }

void main(int a) {
    return 0;
}

// int x;
// short x = 1;
// 
// int v;
// int v;
// int v = 1;
// int v;
// int v = 2;