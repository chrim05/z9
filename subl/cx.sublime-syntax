%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: cx
scope: source.cx

file_extensions:
  - cx

first_line_match: |-
  (?xi:
    ^ \s* // .*? -\*- .*? \bc\b(?![#+]) .*? -\*-  # editorconfig
  )

variables:
  # number digits
  bin_digit: '[01]'
  oct_digit: '[0-7]'
  dec_digit: '\d'
  hex_digit: '\h'

  dec_digits: '{{dec_digit}}+'

  # number exponents
  dec_exponent: '(?:[eE][-+]?{{dec_digit}}*)'
  hex_exponent: '(?:[pP][-+]?{{dec_digit}}*)'

  # number suffixes
  bin_suffix: '[2-9a-zA-Z_][[:alnum:]_]*'
  oct_suffix: '[8-9g-zG-Z_][[:alnum:]_]*'
  dec_suffix: '[a-zA-Z_][[:alnum:]_]*'
  hex_suffix: '[g-zG-Z_][[:alnum:]_]*'
  double_suffix: '[fFlL]'
  float_suffix: '[fF]'
  integer_suffix: '[lL]{1,2}[uU]?|[uU][lL]{0,2}'

  identifier: \b[[:alpha:]_][[:alnum:]_]*\b # upper and lowercase
  word: '[[:alpha:]_][[:alnum:]_]*'
  macro_identifier: \b[[:upper:]_][[:upper:][:digit:]_]{2,}\b # only uppercase, at least 3 chars
  control_keywords: 'break|case|continue|default|do|else|for|goto|if|_Pragma|return|switch|while'
  basic_types: 'asm|__asm__|auto|bool|_Bool|char|_Complex|double|float|_Imaginary|int|long|short|signed|unsigned|void'
  before_tag: 'struct|union|enum'
  microsoft_types: '__int8|__int16|__int32|__int64'
  windows_types: 'APIENTRY|ATOM|BOOL|BOOLEAN|BYTE|CALLBACK|CCHAR|CHAR|COLORREF|CONST|DWORD|DWORDLONG|DWORD_PTR|DWORD32|DWORD64|FLOAT|HACCEL|HALF_PTR|HANDLE|HBITMAP|HBRUSH|HCOLORSPACE|HCONV|HCONVLIST|HCURSOR|HDC|HDDEDATA|HDESK|HDROP|HDWP|HENHMETAFILE|HFILE|HFONT|HGDIOBJ|HGLOBAL|HHOOK|HICON|HINSTANCE|HKEY|HKL|HLOCAL|HMENU|HMETAFILE|HMODULE|HMONITOR|HPALETTE|HPEN|HRESULT|HRGN|HRSRC|HSZ|HWINSTA|HWND|INT|INT_PTR|INT8|INT16|INT32|INT64|LANGID|LCID|LCTYPE|LGRPID|LONG|LONGLONG|LONG_PTR|LONG32|LONG64|LPARAM|LPBOOL|LPBYTE|LPCOLORREF|LPCSTR|LPCTSTR|LPCVOID|LPCWSTR|LPDWORD|LPHANDLE|LPINT|LPLONG|LPSTR|LPTSTR|LPVOID|LPWORD|LPWSTR|LRESULT|PBOOL|PBOOLEAN|PBYTE|PCHAR|PCSTR|PCTSTR|PCWSTR|PDWORD|PDWORDLONG|PDWORD_PTR|PDWORD32|PDWORD64|PFLOAT|PHALF_PTR|PHANDLE|PHKEY|PINT|PINT_PTR|PINT8|PINT16|PINT32|PINT64|PLCID|PLONG|PLONGLONG|PLONG_PTR|PLONG32|PLONG64|POINTER_32|POINTER_64|POINTER_SIGNED|POINTER_UNSIGNED|PSHORT|PSIZE_T|PSSIZE_T|PSTR|PTBYTE|PTCHAR|PTSTR|PUCHAR|PUHALF_PTR|PUINT|PUINT_PTR|PUINT8|PUINT16|PUINT32|PUINT64|PULONG|PULONGLONG|PULONG_PTR|PULONG32|PULONG64|PUSHORT|PVOID|PWCHAR|PWORD|PWSTR|QWORD|SC_HANDLE|SC_LOCK|SERVICE_STATUS_HANDLE|SHORT|SIZE_T|SSIZE_T|TBYTE|TCHAR|UCHAR|UHALF_PTR|UINT|UINT_PTR|UINT8|UINT16|UINT32|UINT64|ULONG|ULONGLONG|ULONG_PTR|ULONG32|ULONG64|UNICODE_STRING|USHORT|USN|VOID|WCHAR|WINAPI|WORD|WPARAM'
  stdint: 'int8_t|int16_t|int32_t|int64_t|uint8_t|uint16_t|uint32_t|uint64_t|int_least8_t|int_least16_t|int_least32_t|int_least64_t|uint_least8_t|uint_least16_t|uint_least32_t|uint_least64_t|int_fast8_t|int_fast16_t|int_fast32_t|int_fast64_t|uint_fast8_t|uint_fast16_t|uint_fast32_t|uint_fast64_t|intptr_t|uintptr_t|intmax_t|intmax_t|uintmax_t|uintmax_t'
  declspec: '__declspec\(\s*\w+(?:\([^)]+\))?\s*\)'
  storage_classes: 'static|extern|register|{{declspec}}'
  type_qualifier: 'const|volatile'
  compiler_directive: 'inline|restrict|__restrict__|__restrict'
  modifiers: '{{storage_classes}}|{{type_qualifier}}|{{compiler_directive}}'
  non_func_keywords: 'if|for|switch|while|decltype|sizeof|__declspec|__attribute__'

contexts:
  main:
    - include: preprocessor-global
    - include: global

  #############################################################################
  # Reusable contexts
  #
  # The follow contexts are currently constructed to be reused in the C++
  # syntax. They are specifically constructed to not push into sub-contexts,
  # which ensures that C++ code isn't accidentally lexed as plain C. They also
  # should not use the {{identifier}} variable since that is different for C++.
  #############################################################################

  comments:
    - match: ^/\* =(\s*.*?)\s*= \*/$\n?
      scope: comment.block.cx
      captures:
        1: meta.toc-list.banner.block.cx
    - match: /\*
      scope: punctuation.definition.comment.cx
      push:
        - meta_scope: comment.block.cx
        - match: \*/
          scope: punctuation.definition.comment.cx
          pop: true
        - match: ^\s*(\*)(?!/)
          captures:
            1: punctuation.definition.comment.cx
    - match: \*/(?!\*)
      scope: invalid.illegal.stray-comment-end.cx
    - match: ^// =(\s*.*?)\s*=\s*$\n?
      scope: comment.line.banner.cx
      captures:
        1: meta.toc-list.banner.line.cx
    - match: //
      scope: punctuation.definition.comment.cx
      push:
        - meta_scope: comment.line.double-slash.cx
        - match: '(\\)$\n'
          captures:
            1: punctuation.separator.continuation.cx
        - match: \n
          pop: true

  strings:
    - match: '(@|L|u8|u|U)?(")'
      scope: punctuation.definition.string.begin.cx
      # captures:
      #   1: storage.type.string.cx
      #   2: punctuation.definition.string.begin.cx
      push:
        - meta_scope: string.quoted.double.cx
        - match: '"'
          scope: punctuation.definition.string.end.cx
          pop: true
        - include: string_escaped_char
        - include: string_placeholder
    - match: "(L|u8|u|U)?(')"
      captures:
        1: storage.type.string.cx
        2: punctuation.definition.string.begin.cx
      push:
        - meta_scope: string.quoted.single.cx
        - match: "'"
          scope: punctuation.definition.string.end.cx
          pop: true
        - include: string_escaped_char

  string_escaped_char:
    - match: '(\\)$\n'
      captures:
        1: punctuation.separator.continuation.cx
    - match: \\(?:\\|[abefnrtv\'"?]|[0-3][0-9]{0,2}|[4-7][0-9]?|x[a-fA-F0-9]+|u[a-fA-F0-9]{4}|U[a-fA-F0-9]{8})
      scope: constant.character.escape.cx
    - match: \\.
      scope: invalid.illegal.unknown-escape.cx

  string_placeholder:
    - match: |-
        (?x)%
          (\d+\$)?                                      # field (argument #)
          [#0\- +']*                                    # flags
          [,;:_]?                                       # separator character (AltiVec)
          ((-?\d+)|\*(-?\d+\$)?)?                       # minimum field width
          (\.((-?\d+)|\*(-?\d+\$)?)?)?                  # precision
          (hh|h|ll|l|j|t|z|q|L|vh|vl|v|hv|hl)?          # length modifier
          (\[[^\]]+\]|[am]s|[diouxXDOUeEfFgGaACcSspn%]) # conversion type
      scope: constant.other.placeholder.cx

  keywords:
    - match: \bbreak\b
      scope: keyword.control.flow.break.cx
    - match: \bcontinue\b
      scope: keyword.control.flow.continue.cx
    - match: \bgoto\b
      scope: keyword.control.flow.goto.cx
    - match: \breturn\b
      scope: keyword.control.flow.return.cx
    - match: \b({{control_keywords}})\b
      scope: keyword.control.cx
    - match: \bsizeof\b
      scope: keyword.operator.word.cx

  modifiers:
    - match: \b({{modifiers}})\b
      scope: storage.modifier.cx

  variables:
    - match: '\bg[A-Z]\w*\b'
      scope: variable.other.readwrite.global.mac-classic.cx
    - match: '\bs[A-Z]\w*\b'
      scope: variable.other.readwrite.static.mac-classic.cx

  constants:
    - match: \b(__func__|NULL|true|false|TRUE|FALSE)\b
      scope: constant.language.cx
    - match: \b(__FILE__|__FUNCTION__|__LINE__)\b
      scope: support.constant.cx
    # common C constant naming idiom -- kConstantVariable
    - match: '\bk[A-Z]\w*\b'
      scope: constant.other.variable.mac-classic.cx
    - match: \b(noErr|kNilOptions|kInvalidID|kVariableLengthArray)\b
      scope: support.constant.mac-classic.cx

  c99:
    - match: \b(hypot(f|l)?|s(scanf|ystem|nprintf|ca(nf|lb(n(f|l)?|ln(f|l)?))|i(n(h(f|l)?|f|l)?|gn(al|bit))|tr(s(tr|pn)|nc(py|at|mp)|c(spn|hr|oll|py|at|mp)|to(imax|d|u(l(l)?|max)|k|f|l(d|l)?)|error|pbrk|ftime|len|rchr|xfrm)|printf|et(jmp|vbuf|locale|buf)|qrt(f|l)?|w(scanf|printf)|rand)|n(e(arbyint(f|l)?|xt(toward(f|l)?|after(f|l)?))|an(f|l)?)|c(s(in(h(f|l)?|f|l)?|qrt(f|l)?)|cos(h(f)?|f|l)?|imag(f|l)?|t(ime|an(h(f|l)?|f|l)?)|o(s(h(f|l)?|f|l)?|nj(f|l)?|pysign(f|l)?)|p(ow(f|l)?|roj(f|l)?)|e(il(f|l)?|xp(f|l)?)|l(o(ck|g(f|l)?)|earerr)|a(sin(h(f|l)?|f|l)?|cos(h(f|l)?|f|l)?|tan(h(f|l)?|f|l)?|lloc|rg(f|l)?|bs(f|l)?)|real(f|l)?|brt(f|l)?)|t(ime|o(upper|lower)|an(h(f|l)?|f|l)?|runc(f|l)?|gamma(f|l)?|mp(nam|file))|i(s(space|n(ormal|an)|cntrl|inf|digit|u(nordered|pper)|p(unct|rint)|finite|w(space|c(ntrl|type)|digit|upper|p(unct|rint)|lower|al(num|pha)|graph|xdigit|blank)|l(ower|ess(equal|greater)?)|al(num|pha)|gr(eater(equal)?|aph)|xdigit|blank)|logb(f|l)?|max(div|abs))|difftime|_Exit|unget(c|wc)|p(ow(f|l)?|ut(s|c(har)?|wc(har)?)|error|rintf)|e(rf(c(f|l)?|f|l)?|x(it|p(2(f|l)?|f|l|m1(f|l)?)?))|v(s(scanf|nprintf|canf|printf|w(scanf|printf))|printf|f(scanf|printf|w(scanf|printf))|w(scanf|printf)|a_(start|copy|end|arg))|qsort|f(s(canf|e(tpos|ek))|close|tell|open|dim(f|l)?|p(classify|ut(s|c|w(s|c))|rintf)|e(holdexcept|set(e(nv|xceptflag)|round)|clearexcept|testexcept|of|updateenv|r(aiseexcept|ror)|get(e(nv|xceptflag)|round))|flush|w(scanf|ide|printf|rite)|loor(f|l)?|abs(f|l)?|get(s|c|pos|w(s|c))|re(open|e|ad|xp(f|l)?)|m(in(f|l)?|od(f|l)?|a(f|l|x(f|l)?)?))|l(d(iv|exp(f|l)?)|o(ngjmp|cal(time|econv)|g(1(p(f|l)?|0(f|l)?)|2(f|l)?|f|l|b(f|l)?)?)|abs|l(div|abs|r(int(f|l)?|ound(f|l)?))|r(int(f|l)?|ound(f|l)?)|gamma(f|l)?)|w(scanf|c(s(s(tr|pn)|nc(py|at|mp)|c(spn|hr|oll|py|at|mp)|to(imax|d|u(l(l)?|max)|k|f|l(d|l)?|mbs)|pbrk|ftime|len|r(chr|tombs)|xfrm)|to(b|mb)|rtomb)|printf|mem(set|c(hr|py|mp)|move))|a(s(sert|ctime|in(h(f|l)?|f|l)?)|cos(h(f|l)?|f|l)?|t(o(i|f|l(l)?)|exit|an(h(f|l)?|2(f|l)?|f|l)?)|b(s|ort))|g(et(s|c(har)?|env|wc(har)?)|mtime)|r(int(f|l)?|ound(f|l)?|e(name|alloc|wind|m(ove|quo(f|l)?|ainder(f|l)?))|a(nd|ise))|b(search|towc)|m(odf(f|l)?|em(set|c(hr|py|mp)|move)|ktime|alloc|b(s(init|towcs|rtowcs)|towc|len|r(towc|len))))\b
      scope: support.function.C99.cx

  types:
    - match: \b({{before_tag}})\b
      scope: keyword.declaration.cx
    - match: \b({{basic_types}})\b
      scope: storage.type.cx
    - match: \b(u_char|u_short|u_int|u_long|ushort|uint|u_quad_t|quad_t|qaddr_t|caddr_t|daddr_t|dev_t|fixpt_t|blkcnt_t|blksize_t|gid_t|in_addr_t|in_port_t|ino_t|key_t|mode_t|nlink_t|id_t|pid_t|off_t|segsz_t|swblk_t|uid_t|id_t|clock_t|size_t|ssize_t|time_t|useconds_t|suseconds_t|ptrdiff_t)\b
      scope: support.function.C99.cx
    - match: \b(pthread_attr_t|pthread_cond_t|pthread_condattr_t|pthread_mutex_t|pthread_mutexattr_t|pthread_once_t|pthread_rwlock_t|pthread_rwlockattr_t|pthread_t|pthread_key_t)\b
      scope: support.type.pthread.cx
    - match: \b({{stdint}})\b
      scope: support.function.C99.cx
    - match: \b({{word}}_t)\b
      scope: support.function.C99.cx
    - match: \b({{word}}_i)\b
      scope: support.type.cx
    - match: '\b({{microsoft_types}})\b'
      scope: support.type.microsoft.cx
    - match: '\b({{windows_types}})\b'
      scope: support.type.windows.cx
    - match: \b(AbsoluteTime|Boolean|Byte|ByteCount|ByteOffset|BytePtr|CompTimeValue|ConstLogicalAddress|ConstStrFileNameParam|ConstStringPtr|Duration|Fixed|FixedPtr|Float32|Float32Point|Float64|Float80|Float96|FourCharCode|Fract|FractPtr|Handle|ItemCount|LogicalAddress|OptionBits|OSErr|OSStatus|OSType|OSTypePtr|PhysicalAddress|ProcessSerialNumber|ProcessSerialNumberPtr|ProcHandle|Ptr|ResType|ResTypePtr|ShortFixed|ShortFixedPtr|SignedByte|SInt16|SInt32|SInt64|SInt8|Size|StrFileName|StringHandle|StringPtr|TimeBase|TimeRecord|TimeScale|TimeValue|TimeValue64|UInt16|UInt32|UInt64|UInt8|UniChar|UniCharCount|UniCharCountPtr|UniCharPtr|UnicodeScalarValue|UniversalProcHandle|UniversalProcPtr|UnsignedFixed|UnsignedFixedPtr|UnsignedWide|UTF16Char|UTF32Char|UTF8Char)\b
      scope: support.type.mac-classic.cx

  numbers:
    # https://en.cppreference.com/w/c/language/floating_constant

    # decimal floats
    - match: |-
        (?x:
          \b({{dec_digits}})
          (?:
            ( (\.)
              (?:
                # 1.1, 1.1e1, 1.1e-1, 1.1f, 1.1e1f, 1.1e-1f, 1.1L, 1.1e1L, 1.1e-1L
                {{dec_digit}}+ {{dec_exponent}}?
                # 1.e1, 1.e-1, 1.e1f, 1.e-1f, 1.e1L, 1.e-1L
                | {{dec_exponent}}
                # 1., 1.f, 1.L # but not `..`
                | (?!\.)
              )
              # 1e1 1e1f 1e1L
              | {{dec_exponent}}
            ) ({{double_suffix}})?
            # 1f
            | ({{float_suffix}})
          ) ({{dec_suffix}})?
          # .1, .1e1, .1e-1, .1f, .1e1f, .1e-1f, .1L, .1e1L, .1e-1L
          | ( (\.) {{dec_digit}}+ {{dec_exponent}}? ) (?: ({{double_suffix}}) | ({{dec_suffix}}) )?
        )
      scope: meta.number.float.decimal.cx
      captures:
        1: constant.numeric.value.cx
        2: constant.numeric.value.cx
        3: punctuation.separator.decimal.cx
        4: constant.numeric.suffix.cx
        5: constant.numeric.suffix.cx
        6: invalid.illegal.numeric.suffix.cx
        7: constant.numeric.value.cx
        8: punctuation.separator.decimal.cx
        9: constant.numeric.suffix.cx
        10: invalid.illegal.numeric.suffix.cx

    # hexadecimal float (C99)
    - match: \b(0[xX])({{hex_digit}}*(\.){{hex_digit}}*{{hex_exponent}})(?:([fFlL]\b)|({{dec_suffix}}))?
      scope: meta.number.float.hexadecimal.cx
      captures:
        1: constant.numeric.base.cx
        2: constant.numeric.value.cx
        3: punctuation.separator.decimal.cx
        4: constant.numeric.suffix.cx
        5: invalid.illegal.numeric.suffix.cx

    # https://en.cppreference.com/w/c/language/integer_constant

    # binary integer (C23)
    - match: \b(0[bB])({{bin_digit}}*)(?:({{integer_suffix}})|({{bin_suffix}}))?
      scope: meta.number.integer.binary.cx
      captures:
        1: constant.numeric.base.cx
        2: constant.numeric.value.cx
        3: constant.numeric.suffix.cx
        4: invalid.illegal.numeric.suffix.cx

    # hexadecimal integer
    - match: \b(0[xX])({{hex_digit}}*)(?:({{integer_suffix}})|({{hex_suffix}}))?
      scope: meta.number.integer.hexadecimal.cx
      captures:
        1: constant.numeric.base.cx
        2: constant.numeric.value.cx
        3: constant.numeric.suffix.cx
        4: invalid.illegal.numeric.suffix.cx

    # octal integer
    - match: \b(0)({{oct_digit}}+)(?:({{integer_suffix}})|({{oct_suffix}}))?
      scope: meta.number.integer.octal.cx
      captures:
        1: constant.numeric.base.cx
        2: constant.numeric.value.cx
        3: constant.numeric.suffix.cx
        4: invalid.illegal.numeric.suffix.cx

    # decimal integer
    - match: \b({{dec_digits}})(?:({{integer_suffix}})|({{dec_suffix}}))?
      scope: meta.number.integer.decimal.cx
      captures:
        1: constant.numeric.value.cx
        2: constant.numeric.suffix.cx
        3: invalid.illegal.numeric.suffix.cx

  operators:
    - match: (?:\+\+|--)
      scope: keyword.operator.arithmetic.cx
    - match: '->'
      scope: punctuation.accessor.cx
    - match: \+\=|-\=|\*\=|/\=|%\=|&\=|\|\=|\^\=|>>\=|<<\=
      scope: keyword.operator.assignment.augmented.cx
    - match: <<|>>|&&|\|\|
      scope: keyword.operator.arithmetic.cx
    - match: <\=|>\=|\=\=|<|>|\!\=
      scope: keyword.operator.comparison.cx
    - match: \+|\-|/|%|\||\^|~|!
      scope: keyword.operator.arithmetic.cx
    # These two operator can be both arithmetic and pointer/address related
    - match: \*|&
      scope: keyword.operator.cx
    - match: \=
      scope: keyword.operator.assignment.cx
    # Negative lookahead prevents match :: when included in C++
    - match: '\?|:(?!:)'
      scope: keyword.operator.ternary.cx
    - match: '\.\.\.'
      scope: keyword.operator.variadic.cx

  # access-illegal:
  #   - match: \.\.(?!\.)
  #     scope: invalid.illegal.syntax.cx

  # access:
  #   - match: '(\.)({{identifier}})(?!\s*\()'
  #     captures:
  #       1: punctuation.cx
  #       2: variable.other.member.cx
  #   - include: access-illegal
  #   - match: \.(?!\.)
  #     scope: punctuation.accessor.cx

  label:
    - match: '^\s*({{identifier}})(:)(?!:)'
      captures:
        1: entity.name.label.cx
        2: punctuation.separator.cx

  preprocessor-disabled:
    - match: ^\s*(#\s*if(n?def)?)\b
      captures:
        1: meta.preprocessor.cx
      push:
        - match: ^\s*(#\s*endif)\b
          captures:
            1: meta.preprocessor.cx
          pop: true
        - include: preprocessor-disabled
        - include: pragma-mark
    - include: pragma-mark

  preprocessor-line-continuation:
    - match: '(\\)$\n'
      captures:
        1: punctuation.separator.continuation.cx
    - match: \\(\s+?)$
      captures:
        1: invalid.illegal.space-after-continuation.cx

  preprocessor-line-ending:
    - match: $\n
      pop: true

  # Comment handling in preprocessor directives are complicated by the fact
  # that a single-line comment will normally consume the newline to prevent
  # completions from being presented to the user. Additionally, a multi-line
  # comment without a line continuation ends at the newline.
  preprocessor-comments:
    - match: /\*
      scope: punctuation.definition.comment.cx
      push:
        - meta_scope: comment.block.cx
        - match: '\\$\n'
          scope: punctuation.separator.continuation.cx
        - match: \*/
          scope: punctuation.definition.comment.cx
          pop: true
    - match: //
      scope: punctuation.definition.comment.cx
      push:
        - meta_scope: comment.line.double-slash.cx
        - match: '(\\)$\n'
          captures:
            1: punctuation.separator.continuation.cx
          pop: true
        - match: (?=\n)
          pop: true

  pragma-mark:
    - match: ^\s*((#\s*pragma\s+mark)\s+(.*))
      scope: meta.section.cx
      captures:
        1: meta.preprocessor.cx
        2: keyword.control.import.pragma.cx
        3: meta.toc-list.pragma-mark.cx

  # Used by "inc" snippets to prevent double ##include
  incomplete-inc:
    - match: '^\s*(#i(nc?)?)\b\s*'
      scope: meta.preprocessor.incomplete.cx

  #############################################################################
  # The following are C-specific scopes that should not be reused. This is
  # because they push into subcontexts and use variables that are C-specific.
  #############################################################################

  global:
    - include: early-expressions
    - match: '^\s*(?=\w+)'
      push: global-modifier
    - include: late-expressions

  statements:
    - include: preprocessor-statements
    - include: label
    - include: expressions

  expressions:
    - include: early-expressions
    - include: late-expressions

  early-expressions:
    - include: preprocessor-expressions
    - include: comments
    - include: typedef
    - include: meta_id
    - include: keywords-parens
    - include: keywords
    - include: numbers
    - include: operators
    - include: strings
    - include: parens
    - include: brackets
    - include: block
    - include: variables
    - include: constants
    # - include: access
    - match: ','
      scope: punctuation.separator.cx
    - match: '\)|\}'
      scope: invalid.illegal.stray-bracket-end.cx

  late-expressions:
    - include: modifiers-parens
    - include: modifiers
    - include: types
    - include: function-call
    - match: ';'
      scope: punctuation.terminator.cx

  ## C-specific contexts

  global-modifier:
    - include: comments
    - include: modifiers-parens
    - include: modifiers
    - match: '(?=\S)'
      set: global-type

  global-type:
    - include: comments
    - match: \*
      scope: keyword.operator.cx
    - match: |-
        (?x:
          ({{before_tag}})
          \s+
          (?=
            {{identifier}}
            (\s+{{identifier}}(?!\s*[{=;])|\s*\*+)
          )
        )
      captures:
        1: keyword.declaration.cx
      set: global-maybe-function
    # The previous match handles return types of struct/enum/etc from a func,
    # there this one exits the context to allow matching an actual struct/union
    - match: '(?=\b({{before_tag}})\b)'
      set: data-structures
    - match: '(?=\b({{control_keywords}})\b)'
      pop: true
    - match: '(?=\s)'
      set: global-maybe-function
    # Allow a macro call
    - match: '({{identifier}})\s*(\()(?=[^\)]+\))'
      captures:
        1: variable.function.cx
        2: meta.group.c punctuation.section.group.begin.cx
      push:
        - meta_scope: meta.function-call.cx
        - meta_content_scope: meta.group.cx
        - match: '\)'
          scope: meta.group.c punctuation.section.group.end.cx
          pop: true
        - include: expressions
    - match: (?={{identifier}}\s*\()
      set:
        - include: function-call
        - match: ''
          pop: true
    - include: types
    - match: '{{identifier}}'
    - match: (?=\W)
      pop: true

  global-maybe-function:
    - include: comments
    # Consume pointer info, macros and any type info that was offset by macros
    - match: \*
      scope: keyword.operator.cx
    - include: types
    - include: modifiers-parens
    - include: modifiers
    # All uppercase identifier just before a newline is most likely a macro
    - match: '[[:upper:][:digit:]_]+\s*$'
    # Identifier that is not the function name - likely a macro
    - match: '{{identifier}}(?!\s*(\(|\<|$))'
    # Real function definition
    - match: '{{identifier}}(?=\s*(\(|\<|$))'
      scope: meta.function.c entity.name.function.cx
      set: function-definition-pre-params
    - match: '(?=\S)'
      pop: true

  function-definition-pre-params:
    - meta_content_scope: meta.function.cx
    - include: comments
    - match: '(?=\<)'
      set:
        - match: \<
          scope: meta.function.parameters.c meta.group.c punctuation.section.group.begin.cx
          set:
            - meta_content_scope: meta.function.parameters.c meta.group.cx
            - match : \>
              scope: punctuation.section.group.end.cx
              set: function-definition-params
            - match: '{{identifier}}(?=\s*(\[|,|\)))'
              scope: variable.parameter.cx
            - include: expressions
            - include: preprocessor-line-continuation
    - include: function-definition-params

  function-definition-params:
    - meta_content_scope: meta.function.cx
    - include: comments
    - match: '(?=\<)'
      set:
        - match: \<
          scope: meta.function.parameters.c meta.group.c punctuation.section.group.begin.cx
          set:
            - meta_content_scope: meta.function.parameters.c meta.group.cx
            - match : \>
              scope: punctuation.section.group.end.cx
              set: function-definition-continue
            - match: '{{identifier}}(?=\s*(\[|,|\)))'
              scope: variable.parameter.cx
            - include: expressions
            - include: preprocessor-line-continuation
    - match: '(?=\()'
      set:
        - match: \(
          scope: meta.function.parameters.c meta.group.c punctuation.section.group.begin.cx
          set:
            - meta_content_scope: meta.function.parameters.c meta.group.cx
            - match : \)
              scope: punctuation.section.group.end.cx
              set: function-definition-continue
            - match: '\bvoid\b'
              scope: storage.type.cx
            - match: '{{identifier}}(?=\s*(\[|,|\)))'
              scope: variable.parameter.cx
            - include: expressions
            - include: preprocessor-line-continuation
    - match: (?=\S)
      pop: true

  function-definition-continue:
    - meta_content_scope: meta.function.cx
    - include: comments
    - match: '(?=;)'
      pop: true
    - match: \b(const|final|noexcept|override)\b
      scope: storage.modifier.cx
    - match: '(?=\{)'
      set: function-definition-body
    - match: '(?=\S)'
      pop: true

  function-definition-body:
    - meta_content_scope: meta.function.cx
    - match: '\{'
      scope: meta.block.c punctuation.section.block.begin.cx
      set:
        - meta_content_scope: meta.function.c meta.block.cx
        - match: '\}'
          scope: meta.function.c meta.block.c punctuation.section.block.end.cx
          pop: true
        - match: (?=^\s*#\s*(elif|else|endif)\b)
          pop: true
        - match: '(?=({{before_tag}})([^(;]+$|.*\{))'
          push: data-structures
        - include: statements

  data-structures:
    # Detect variable type definitions using struct/enum/union followed by a tag
    - match: '\b({{before_tag}})(?=\s+{{identifier}}\s+{{identifier}}\s*[=;\[])'
      scope: keyword.declaration.cx
    - match: '\bstruct\b'
      scope: keyword.declaration.struct.cx
      set: data-structures-struct-definition
    - match: '\benum\b'
      scope: keyword.declaration.enum.cx
      set: data-structures-enum-definition
    - match: '\bunion\b'
      scope: keyword.declaration.union.cx
      set: data-structures-union-definition
    - match: '(?=\S)'
      pop: true

  data-structures-struct-definition:
    - meta_scope: meta.struct.cx
    - include: data-structures-definition-common-begin
    - include: data-structures-definition-common-macro
    - match: '{{identifier}}(?=\s*;)'
      scope: entity.name.struct.forward-decl.cx
    - match: '{{identifier}}'
      scope: entity.name.struct.cx
      set: data-structures-struct-definition-after-name
    - include: data-structures-struct-definition-block-start
    - match: '(?=;)'
      pop: true

  data-structures-struct-definition-after-name:
    - meta_scope: meta.struct.cx
    - include: data-structures-definition-common-begin
    - match: '(?=;)'
      pop: true
    - include: data-structures-struct-definition-block-start

  data-structures-struct-definition-block-start:
    - match: '\{'
      scope: meta.block.c punctuation.section.block.begin.cx
      set:
        - meta_content_scope: meta.struct.c meta.block.cx
        - match: '\}'
          scope: meta.struct.c meta.block.c punctuation.section.block.end.cx
          pop: true
        - include: data-structures-body

  data-structures-enum-definition:
    - meta_scope: meta.enum.cx
    - include: data-structures-definition-common-begin
    - include: data-structures-definition-common-macro
    - match: '{{identifier}}(?=\s*;)'
      scope: entity.name.enum.forward-decl.cx
    - match: '{{identifier}}'
      scope: entity.name.enum.cx
      set: data-structures-enum-definition-after-name
    - include: data-structures-enum-definition-block-start
    - match: '(?=;)'
      pop: true

  data-structures-enum-definition-after-name:
    - meta_scope: meta.enum.cx
    - include: data-structures-definition-common-begin
    - match: '(?=;)'
      pop: true
    - include: data-structures-enum-definition-block-start

  data-structures-enum-definition-block-start:
    - match: '\{'
      scope: meta.block.c punctuation.section.block.begin.cx
      set:
        - meta_content_scope: meta.enum.c meta.block.cx
        # Enums don't support methods so we have a simplified body
        - match: '\}'
          scope: meta.enum.c meta.block.c punctuation.section.block.end.cx
          pop: true
        - include: data-structures-body-enum

  data-structures-union-definition:
    - meta_scope: meta.union.cx
    - include: data-structures-definition-common-begin
    - include: data-structures-definition-common-macro
    - match: '{{identifier}}(?=\s*;)'
      scope: entity.name.union.forward-decl.cx
    - match: '{{identifier}}'
      scope: entity.name.union.cx
      set: data-structures-union-definition-after-name
    - include: data-structures-union-definition-block-start
    - match: '(?=;)'
      pop: true

  data-structures-union-definition-after-name:
    - meta_scope: meta.union.cx
    - include: data-structures-definition-common-begin
    - match: '(?=;)'
      pop: true
    - include: data-structures-union-definition-block-start

  data-structures-union-definition-block-start:
    - match: '\{'
      scope: meta.block.c punctuation.section.block.begin.cx
      set:
        - meta_content_scope: meta.union.c meta.block.cx
        - match: '\}'
          scope: meta.union.c meta.block.c punctuation.section.block.end.cx
          pop: true
        - include: data-structures-body

  data-structures-definition-common-begin:
    - include: comments
    - match: '(?=\b(?:{{before_tag}}|{{control_keywords}})\b)'
      pop: true
    - include: modifiers-parens
    - include: modifiers

  data-structures-definition-common-macro:
    # Handle macros so they aren't matched as the class name
    - match: '\b[[:upper:][:digit:]_]+\b(?!\s*($|\{))'

  data-structures-definition-common-end:
    - match: '(?=;)'
      pop: true

  data-structures-body:
    - include: preprocessor-data-structures
    - match: '(?={{before_tag}})'
      push: data-structures
    - include: expressions

  data-structures-body-enum:
    - include: comments
    - include: preprocessor-data-structures
    - match: '(?={{before_tag}})'
      push: data-structures
    - match: '{{identifier}}'
      scope: entity.name.constant.cx
      push: constant-value
    - match: ','
      scope: punctuation.separator.cx

  constant-value:
    - match: (?=[,;}])
      pop: true
    - include: expressions

  block:
    - match: '\{'
      scope: punctuation.section.block.begin.cx
      push:
        - meta_scope: meta.block.cx
        - match: (?=^\s*#\s*(elif|else|endif)\b)
          pop: true
        - match: '\}'
          scope: punctuation.section.block.end.cx
          pop: true
        - include: statements

  parens:
    - match: \(
      scope: punctuation.section.group.begin.cx
      push:
        - meta_scope: meta.group.cx
        - match: \)
          scope: punctuation.section.group.end.cx
          pop: true
        - include: expressions

  brackets:
    - match: \[
      scope: punctuation.section.brackets.begin.cx
      push:
        - meta_scope: meta.brackets.cx
        - match: \]
          scope: punctuation.section.brackets.end.cx
          pop: true
        - include: expressions

  modifiers-parens:
    - match: \b(__attribute__)\s*(\(\()
      captures:
        1: storage.modifier.cx
        2: meta.group.c punctuation.section.group.begin.cx
      push :
        - meta_scope: meta.attribute.cx
        - meta_content_scope: meta.group.cx
        - include: parens
        - include: strings
        - match: \)\)
          scope: meta.group.c punctuation.section.group.end.cx
          pop: true
    - match: \b(__declspec)(\()
      captures:
        1: storage.modifier.cx
        2: meta.group.c punctuation.section.group.begin.cx
      push:
        - meta_content_scope: meta.group.cx
        - match: '\)'
          scope: meta.group.c punctuation.section.group.end.cx
          pop: true
        - match: '\b(align|allocate|code_seg|deprecated|property|uuid)\b\s*(\()'
          captures:
            1: storage.modifier.cx
            2: meta.group.c punctuation.section.group.begin.cx
          push:
            - meta_content_scope: meta.group.cx
            - match: '\)'
              scope: meta.group.c punctuation.section.group.end.cx
              pop: true
            - include: numbers
            - include: strings
            - match: \b(get|put)\b
              scope: variable.parameter.cx
            - match: ','
              scope: punctuation.separator.cx
            - match: '='
              scope: keyword.operator.assignment.cx
        - match: '\b(appdomain|deprecated|dllimport|dllexport|jintrinsic|naked|noalias|noinline|noreturn|nothrow|novtable|process|restrict|safebuffers|selectany|thread)\b'
          scope: constant.other.cx

  keywords-parens:
    - match: '\b(sizeof)\b\s*(\()'
      captures:
        1: keyword.operator.word.cx
        2: meta.group.c punctuation.section.group.begin.cx
      push:
        - meta_content_scope: meta.group.cx
        - match: '\)'
          scope: meta.group.c punctuation.section.group.end.cx
          pop: true
        - include: expressions

  typedef:
    - match: \s*\btypedef\b
      scope: keyword.declaration.type.cx

  meta_id:
    - match: (@)(\b{{word}}_t\b)
      scope: support.function.C99.cx
    - match: (@)({{identifier}})
      scope: keyword.declaration.type.cx

  function-call:
    - match: (?={{identifier}}\s*(<.*>)?\s*\()
      push:
        - meta_content_scope: meta.function-call.cx
        - include: c99
        - match: '{{identifier}}'
          scope: variable.function.cx
        - match: '\<'
          scope: meta.template.cxx punctuation.definition.template.begin.cxx
          set:
            - match: '\>'
              scope: meta.template.cxx punctuation.definition.template.end.cxx
              pop: true
            - include: expressions
        - match: '\('
          scope: meta.group.c punctuation.section.group.begin.cx
          set:
            - match : \)
              scope: meta.function-call.c meta.group.c punctuation.section.group.end.cx
              pop: true
            - include: expressions

  ## Preprocessor for data-structures

  preprocessor-data-structures:
    - include: preprocessor-rule-enabled-data-structures
    - include: preprocessor-rule-disabled-data-structures

  preprocessor-rule-disabled-data-structures:
    - match: ^\s*((#if)\s+(0+))\b
      captures:
        1: meta.preprocessor.cx
        2: keyword.control.import.cx
        3: meta.number.integer.decimal.c constant.numeric.value.cx
      push:
        - match: ^\s*(#\s*endif)\b
          captures:
            1: meta.preprocessor.c keyword.control.import.cx
          pop: true
        - match: ^\s*(#\s*else)\b
          captures:
            1: meta.preprocessor.c keyword.control.import.else.cx
          push:
            - match: (?=^\s*#\s*endif\b)
              pop: true
            - include: negated-block
            - include: data-structures-body
        - match: ""
          push:
            - meta_scope: comment.block.preprocessor.if-branch.cx
            - match: (?=^\s*#\s*(else|endif)\b)
              pop: true
            - include: preprocessor-disabled

  preprocessor-if-true:
    - match: ^\s*(#\s*endif)\b
      captures:
        1: meta.preprocessor.c keyword.control.import.cx
      pop: true
    - match: ^\s*(#\s*else)\b
      captures:
        1: meta.preprocessor.c keyword.control.import.else.cx
      push:
        - meta_content_scope: comment.block.preprocessor.else-branch.cx
        - match: (?=^\s*#\s*endif\b)
          pop: true
        - include: preprocessor-disabled

  preprocessor-rule-enabled-data-structures:
    - match: ^\s*((#if)\s+(0*[1-9]+[\d]*))\b
      captures:
        1: meta.preprocessor.cx
        2: keyword.control.import.cx
        3: meta.number.integer.decimal.c constant.numeric.value.cx
      push:
        - include: preprocessor-if-true
        - match: ""
          push:
            - match: (?=^\s*#\s*(else|endif)\b)
              pop: true
            - include: negated-block
            - include: data-structures-body

  ## Preprocessor for global

  preprocessor-global:
    - include: preprocessor-rule-enabled-global
    - include: preprocessor-rule-disabled-global
    - include: preprocessor-rule-other-global

  preprocessor-statements:
    - include: preprocessor-rule-enabled-statements
    - include: preprocessor-rule-disabled-statements
    - include: preprocessor-rule-other-statements

  preprocessor-expressions:
    - include: incomplete-i.cx
    - include: preprocessor-macro-define
    - include: pragma-mark
    - include: preprocessor-other

  preprocessor-rule-disabled-global:
    - match: ^\s*((#if)\s+(0+))\b
      captures:
        1: meta.preprocessor.cx
        2: keyword.control.import.cx
        3: meta.number.integer.decimal.c constant.numeric.value.cx
      push:
        - match: ^\s*(#\s*endif)\b
          captures:
            1: meta.preprocessor.c keyword.control.import.cx
          pop: true
        - match: ^\s*(#\s*else)\b
          captures:
            1: meta.preprocessor.c keyword.control.import.else.cx
          push:
            - match: (?=^\s*#\s*endif\b)
              pop: true
            - include: preprocessor-global
            - include: negated-block
            - include: global
        - match: ""
          push:
            - meta_scope: comment.block.preprocessor.if-branch.cx
            - match: (?=^\s*#\s*(else|endif)\b)
              pop: true
            - include: preprocessor-disabled

  preprocessor-rule-enabled-global:
    - match: ^\s*((#if)\s+(0*[1-9]+[\d]*))\b
      captures:
        1: meta.preprocessor.cx
        2: keyword.control.import.cx
        3: meta.number.integer.decimal.c constant.numeric.value.cx
      push:
        - include: preprocessor-if-true
        - match: ""
          push:
            - match: (?=^\s*#\s*(else|endif)\b)
              pop: true
            - include: preprocessor-global
            - include: negated-block
            - include: global

  preprocessor-rule-other-global:
    - match: ^\s*(#\s*(?:if|ifdef|ifndef))\b
      captures:
        1: keyword.control.import.cx
      push:
        - meta_scope: meta.preprocessor.cx
        - include: preprocessor-line-continuation
        - include: preprocessor-comments
        - match: \bdefined\b
          scope: keyword.control.cx
        # Enter a new scope where all elif/else branches have their
        # contexts popped by a subsequent elif/else/endif. This ensures that
        # preprocessor branches don't push multiple meta.block scopes on
        # the stack, thus messing up the "global" context's detection of
        # functions.
        - match: $\n
          set: preprocessor-if-branch-global

  # These gymnastics here ensure that we are properly handling scope even
  # when the preprocessor is used to create different scope beginnings, such
  # as a different if/while condition
  preprocessor-if-branch-global:
    - match: ^\s*(#\s*endif)\b
      captures:
        1: meta.preprocessor.c keyword.control.import.cx
      pop: true
    - match: (?=^\s*#\s*(elif|else)\b)
      push: preprocessor-elif-else-branch-global
    - match: \{
      scope: punctuation.section.block.begin.cx
      set: preprocessor-block-if-branch-global
    - include: preprocessor-global
    - include: negated-block
    - include: global

  preprocessor-block-if-branch-global:
    - meta_scope: meta.block.cx
    - match: ^\s*(#\s*endif)\b
      captures:
        1: meta.preprocessor.c keyword.control.import.cx
      set: preprocessor-block-finish-global
    - match: (?=^\s*#\s*(elif|else)\b)
      push: preprocessor-elif-else-branch-global
    - match: \}
      scope: punctuation.section.block.end.cx
      set: preprocessor-if-branch-global
    - include: statements

  preprocessor-block-finish-global:
    - meta_scope: meta.block.cx
    - match: ^\s*(#\s*(?:if|ifdef|ifndef))\b
      captures:
        1: meta.preprocessor.c keyword.control.import.cx
      set: preprocessor-block-finish-if-branch-global
    - match: \}
      scope: punctuation.section.block.end.cx
      pop: true
    - include: statements

  preprocessor-block-finish-if-branch-global:
    - match: ^\s*(#\s*endif)\b
      captures:
        1: meta.preprocessor.c keyword.control.import.cx
      pop: true
    - match: \}
      scope: punctuation.section.block.end.cx
      set: preprocessor-if-branch-global
    - include: statements

  preprocessor-elif-else-branch-global:
    - match: (?=^\s*#\s*endif\b)
      pop: true
    - include: negated-block
    - include: preprocessor-global
    - include: global

  ## Preprocessor for statements

  preprocessor-rule-disabled-statements:
    - match: ^\s*((#if)\s+(0+))\b
      captures:
        1: meta.preprocessor.cx
        2: keyword.control.import.cx
        3: meta.number.integer.decimal.c constant.numeric.value.cx
      push:
        - match: ^\s*(#\s*endif)\b
          captures:
            1: meta.preprocessor.c keyword.control.import.cx
          pop: true
        - match: ^\s*(#\s*else)\b
          captures:
            1: meta.preprocessor.c keyword.control.import.else.cx
          push:
            - match: (?=^\s*#\s*endif\b)
              pop: true
            - include: negated-block
            - include: statements
        - match: ""
          push:
            - meta_scope: comment.block.preprocessor.if-branch.cx
            - match: (?=^\s*#\s*(else|endif)\b)
              pop: true
            - include: preprocessor-disabled

  preprocessor-rule-enabled-statements:
    - match: ^\s*((#if)\s+(0*[1-9]+[\d]*))\b
      captures:
        1: meta.preprocessor.cx
        2: keyword.control.import.cx
        3: meta.number.integer.decimal.c constant.numeric.value.cx
      push:
        - include: preprocessor-if-true
        - match: ""
          push:
            - match: (?=^\s*#\s*(else|endif)\b)
              pop: true
            - include: negated-block
            - include: statements

  preprocessor-rule-other-statements:
    - match: ^\s*(#\s*(?:if|ifdef|ifndef))\b
      captures:
        1: keyword.control.import.cx
      push:
        - meta_scope: meta.preprocessor.cx
        - include: preprocessor-line-continuation
        - include: preprocessor-comments
        - match: \bdefined\b
          scope: keyword.control.cx
        # Enter a new scope where all elif/else branches have their
        # contexts popped by a subsequent elif/else/endif. This ensures that
        # preprocessor branches don't push multiple meta.block scopes on
        # the stack, thus messing up the "global" context's detection of
        # functions.
        - match: $\n
          set: preprocessor-if-branch-statements

  # These gymnastics here ensure that we are properly handling scope even
  # when the preprocessor is used to create different scope beginnings, such
  # as a different if/while condition
  preprocessor-if-branch-statements:
    - match: ^\s*(#\s*endif)\b
      captures:
        1: meta.preprocessor.c keyword.control.import.cx
      pop: true
    - match: (?=^\s*#\s*(elif|else)\b)
      push: preprocessor-elif-else-branch-statements
    - match: \{
      scope: punctuation.section.block.begin.cx
      set: preprocessor-block-if-branch-statements
    - match: (?=(?!{{non_func_keywords}}){{identifier}}\s*\()
      set: preprocessor-if-branch-function-call
    - include: negated-block
    - include: statements

  preprocessor-if-branch-function-call:
    - meta_content_scope: meta.function-call.cx
    - include: c99
    - match: '{{identifier}}'
      scope: variable.function.cx
    - match: '\('
      scope: meta.group.c punctuation.section.group.begin.cx
      set: preprocessor-if-branch-function-call-arguments

  preprocessor-if-branch-function-call-arguments:
    - meta_content_scope: meta.function-call.c meta.group.cx
    - match : \)
      scope: meta.function-call.c meta.group.c punctuation.section.group.end.cx
      set: preprocessor-if-branch-statements
    - match: ^\s*(#\s*(?:elif|else))\b
      captures:
        1: meta.preprocessor.c keyword.control.import.cx
      set: preprocessor-if-branch-statements
    - match: ^\s*(#\s*endif)\b
      captures:
        1: meta.preprocessor.c keyword.control.import.cx
      set: preprocessor-if-branch-function-call-arguments-finish
    - include: expressions

  preprocessor-if-branch-function-call-arguments-finish:
    - meta_content_scope: meta.function-call.c meta.group.cx
    - match: \)
      scope: meta.function-call.c meta.group.c punctuation.section.group.end.cx
      pop: true
    - include: expressions

  preprocessor-block-if-branch-statements:
    - meta_scope: meta.block.cx
    - match: ^\s*(#\s*endif)\b
      captures:
        1: meta.preprocessor.c keyword.control.import.cx
      set: preprocessor-block-finish-statements
    - match: (?=^\s*#\s*(elif|else)\b)
      push: preprocessor-elif-else-branch-statements
    - match: \}
      scope: punctuation.section.block.end.cx
      set: preprocessor-if-branch-statements
    - include: statements

  preprocessor-block-finish-statements:
    - meta_scope: meta.block.cx
    - match: ^\s*(#\s*(?:if|ifdef|ifndef))\b
      captures:
        1: meta.preprocessor.c keyword.control.import.cx
      set: preprocessor-block-finish-if-branch-statements
    - match: \}
      scope: punctuation.section.block.end.cx
      pop: true
    - include: statements

  preprocessor-block-finish-if-branch-statements:
    - match: ^\s*(#\s*endif)\b
      captures:
        1: meta.preprocessor.c keyword.control.import.cx
      pop: true
    - match: \}
      scope: punctuation.section.block.end.cx
      set: preprocessor-if-branch-statements
    - include: statements

  preprocessor-elif-else-branch-statements:
    - match: (?=^\s*#\s*endif\b)
      pop: true
    - include: negated-block
    - include: statements

  ## Preprocessor other

  negated-block:
    - match: '\}'
      scope: punctuation.section.block.end.cx
      push:
        - match: '\{'
          scope: punctuation.section.block.begin.cx
          pop: true
        - match: (?=^\s*#\s*(elif|else|endif)\b)
          pop: true
        - include: statements

  preprocessor-macro-define:
    - match: ^\s*(#\s*define)\b
      captures:
        1: meta.preprocessor.macro.c keyword.control.import.define.cx
      push:
        - meta_content_scope: meta.preprocessor.macro.cx
        - include: preprocessor-line-continuation
        - include: preprocessor-line-ending
        - include: preprocessor-comments
        - match: '({{identifier}})(?=\()'
          scope: entity.name.function.preprocessor.cx
          set:
            - match: '\('
              scope: punctuation.section.group.begin.cx
              set: preprocessor-macro-params
        - match: '{{identifier}}'
          scope: entity.name.constant.preprocessor.cx
          set: preprocessor-macro-definition

  preprocessor-macro-params:
    - meta_scope: meta.preprocessor.macro.parameters.c meta.group.cx
    - match: '{{identifier}}'
      scope: variable.parameter.cx
    - match: \)
      scope: punctuation.section.group.end.cx
      set: preprocessor-macro-definition
    - match: ','
      scope: punctuation.separator.cx
      push:
        - match: '{{identifier}}'
          scope: variable.parameter.cx
          pop: true
        - include: preprocessor-line-continuation
        - include: preprocessor-comments
        - match: '\.\.\.'
          scope: keyword.operator.variadic.cx
        - match: '(?=\))'
          pop: true
        - match: (/\*).*(\*/)
          scope: comment.block.cx
          captures:
            1: punctuation.definition.comment.cx
            2: punctuation.definition.comment.cx
        - match: '\S+'
          scope: invalid.illegal.unexpected-character.cx
    - include: preprocessor-line-continuation
    - include: preprocessor-comments
    - match: '\.\.\.'
      scope: keyword.operator.variadic.cx
    - match: (/\*).*(\*/)
      scope: comment.block.cx
      captures:
        1: punctuation.definition.comment.cx
        2: punctuation.definition.comment.cx
    - match: $\n
      scope: invalid.illegal.unexpected-end-of-line.cx

  preprocessor-macro-definition:
    - meta_content_scope: meta.preprocessor.macro.cx
    - include: preprocessor-line-continuation
    - include: preprocessor-line-ending
    - include: preprocessor-comments
    # Don't define blocks in define statements
    - match: '\{'
      scope: punctuation.section.block.begin.cx
    - match: '\}'
      scope: punctuation.section.block.end.cx
    - include: expressions

  preprocessor-practical-workarounds:
    - include: preprocessor-convention-ignore-uppercase-ident-lines
    - include: preprocessor-convention-ignore-uppercase-calls-without-semicolon

  preprocessor-convention-ignore-uppercase-ident-lines:
    - match: ^(\s*{{macro_identifier}})+\s*$
      scope: meta.assumed-macro.cx
      push:
        # It's possible that we are dealing with a function return type on its own line, and the
        # name of the function is on the subsequent line.
        - match: \s*({{identifier}})(?=\s*\()
          captures:
            1: meta.function.c entity.name.function.cx
          set: function-definition-params
        - match: ^
          pop: true


  preprocessor-convention-ignore-uppercase-calls-without-semicolon:
    - match: ^\s*({{macro_identifier}})\s*(\()(?=[^)]*\)\s*$)
      captures:
        1: variable.function.assumed-macro.cx
        2: punctuation.section.group.begin.cx
      push:
        - meta_scope: meta.assumed-macro.cx
        - match: \)
          scope: punctuation.section.group.end.cx
          pop: true
        - include: expressions

  preprocessor-other:
    - match: ^\s*(#\s*(?:if|ifdef|ifndef|elif|else|line|pragma|undef))\b
      captures:
        1: keyword.control.import.cx
      push:
        - meta_scope: meta.preprocessor.cx
        - include: preprocessor-line-continuation
        - include: preprocessor-line-ending
        - include: preprocessor-comments
        - match: \bdefined\b
          scope: keyword.control.cx
    - match: ^\s*(#\s*endif)\b
      captures:
        1: meta.preprocessor.c keyword.control.import.cx
    - match: ^\s*(#\s*(?:error|warning))\b
      captures:
        1: keyword.control.import.error.cx
      push:
        - meta_scope: meta.preprocessor.diagnostic.cx
        - include: preprocessor-line-continuation
        - include: preprocessor-line-ending
        - include: preprocessor-comments
        - include: strings
        - match: '\S+'
          scope: string.unquoted.cx
    - match: ^\s*(#\s*(?:include|include_next|import))\b
      captures:
        1: keyword.control.import.include.cx
      push:
        - meta_scope: meta.preprocessor.include.cx
        - include: preprocessor-line-continuation
        - include: preprocessor-line-ending
        - include: preprocessor-comments
        - match: '"'
          scope: punctuation.definition.string.begin.cx
          push:
            - meta_scope: string.quoted.double.include.cx
            - match: '"'
              scope: punctuation.definition.string.end.cx
              pop: true
        - match: <
          scope: punctuation.definition.string.begin.cx
          push:
            - meta_scope: string.quoted.other.lt-gt.include.cx
            - match: ">"
              scope: punctuation.definition.string.end.cx
              pop: true
    - include: preprocessor-practical-workarounds